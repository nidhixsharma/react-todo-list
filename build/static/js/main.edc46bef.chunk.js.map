{"version":3,"sources":["components/TodoItem.js","components/TodoList.js","components/TodoInput.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","_this$props","this","props","text","deleteItem","editItem","react_default","a","createElement","className","onClick","Component","TodoList","items","clearList","console","log","map","item","TodoItem_TodoItem","key","_id","type","TodoInput","changeInput","handleSubmit","onSubmit","placeholder","value","onChange","App","state","loading","handleChangeInput","e","_this","setState","target","preventDefault","newItem","axios","post","then","response","updatedItems","concat","Object","toConsumableArray","catch","err","handleClearList","delete","data","todos","error","handleDeleteItem","id","filteredItems","filter","handleEditItem","selectedItem","find","patch","config","_this2","get","TodoInput_TodoInput","TodoList_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.edc46bef.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class TodoItem extends Component {\r\n  render() {\r\n    const {text,deleteItem, editItem} = this.props;\r\n    return (\r\n      <div>\r\n       <li className=\"list-group-item text-capitalize d-flex justify-content-between my-2\">\r\n       <h6>{text}</h6>\r\n       <div className = \"todo-icon\">\r\n       <span className=\"mx-2 text-success\" onClick ={editItem}>\r\n       <i className=\"fas fa-pen\"></i>\r\n       </span>\r\n       <span className=\"mx-2 text-danger\" onClick ={deleteItem}>\r\n       <i className=\"fas fa-trash\"></i>\r\n       </span>\r\n       </div>\r\n       </li>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport TodoItem from './TodoItem';\r\nexport default class TodoList extends Component {    \r\n     \r\n  render() {\r\n    const {items,clearList,editItem,deleteItem} = this.props;    \r\n    console.log(items);\r\n     \r\n    return (\r\n     <ul className=\"list-group my-5\">\r\n     <h3 className=\"text-capitalize text-center\">todo list</h3>\r\n     \r\n      {items.map(item=>{\r\n      return(<TodoItem key={item._id} \r\n      text={item.text}\r\n      deleteItem ={()=> deleteItem(item._id)}\r\n      editItem ={()=> editItem(item._id)}   \r\n      />);\r\n      })}    \r\n\r\n\r\n      <button type=\"text\"\r\n       className=\"btn btn-block btn-danger text-center mt-5\" \r\n       onClick ={clearList}>clear list</button>\r\n     </ul>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class TodoInput extends Component {\r\n  render() {\r\n    const {item ,changeInput,handleSubmit, editItem } = this.props;\r\n    return (\r\n      <div className=\"card card-body my-3\">\r\n      <form onSubmit ={handleSubmit}>\r\n        <div className=\"input-group\">\r\n      <div className=\"input-group-prepend\">\r\n      <div className=\"input-group-text bg-primary text-white\">\r\n      <i className=\"fas fa-book\"/>\r\n      </div>\r\n      </div>\r\n      <input type=\"text\" \r\n      className=\"form-control text-capitalize\" \r\n      placeholder=\"Add a todo item\"\r\n      value={item}\r\n      onChange={changeInput}\r\n      />\r\n      </div>\r\n      <button type=\"submit\" \r\n      className = {editItem \r\n                ?\"btn btn-block btn-success mt-3\"\r\n                :\"btn btn-block btn-primary mt-3\"}> {editItem?\"Edit Item\":\"Add Item\"}</button>\r\n      </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport TodoList from './components/TodoList';\nimport TodoInput from './components/TodoInput';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass App extends Component {\n  state ={\n    items :[],  \n    item:\"\",\n    editItem :false,\n    loading:false\n  };\n\n  componentDidMount(){\n    axios.get('https://murmuring-fjord-22708.herokuapp.com/todos')\n    .then(response=>{\n     console.log(response.data.todos);\n     let data = response.data.todos;\n     this.setState({\n       items:data});\n    })\n    .catch(error =>{\n      console.log(error, 'something went wrong');\n    });\n  }\n\n  handleChangeInput =(e)=>{\n    this.setState({\n      item:e.target.value\n    });\n    };\n\n  handleSubmit =(e)=>{\n  e.preventDefault();\n\n  const newItem = {\n    text:this.state.item\n  };\n\n  axios.post('https://murmuring-fjord-22708.herokuapp.com/todos',\n     newItem) \n  .then(response=>{  \n    const updatedItems = [...this.state.items,newItem];\n    this.setState({\n      items:updatedItems,\n      item:\" \",\n      editItem:false     \n    });\n    console.log(response,'TodoItem Added');  \n  })\n  .catch(err=>{\n    console.log(err,'Todo Item not Added. try again');\n  });  \n  \n   };\n\n   handleClearList =()=>{   \n    axios.delete('https://murmuring-fjord-22708.herokuapp.com/todos')\n    .then(response=>{\n      let data = response.data.todos;\n      console.log(data);\n      this.setState({\n        items:[]\n      });\n      console.log('List cleared');      \n    }).catch(error=>{\n    console.log('Unable to clear List');\n    });\n   \n  };\n\n\n  handleDeleteItem=(id)=>{\n\n    console.log('Items available to delete' ,this.state.items);\n    console.log(id);\n\n       axios.delete(`https://murmuring-fjord-22708.herokuapp.com/todos/${id}`)\n    .then(response=>{\n      console.log('TodoItem Deleted',response.data);\n      const filteredItems =this.state.items.filter(item=>\n      item._id!==id )\n      this.setState({\n      items:filteredItems\n      //loading:false\n          });\n      })\n    .catch(error =>{\n      console.log(error, 'something went wrong');\n    });\n  \n        \n  };\n\n\n  // handleEditItem=(id)=>{\n\n  //   const filteredItems = this.state.items.filter(item=>\n  //     item.id!==id)\n     \n  //     const selectedItem= this.state.items.find(item=>item.id===id);\n  //     console.log(selectedItem);\n  //     this.setState({\n  //       items:filteredItems,\n  //       item:selectedItem.title,\n  //       editItem:true,\n  //       id:id\n      \n  //     });\n  // };\n  handleEditItem=(id)=>{\n    const filteredItems = this.state.items.filter(item=>\n          item._id!==id)\n    const selectedItem= this.state.items.find(item=>item._id===id);\n     console.log('Item to Update' ,selectedItem);\n  const newItem = {     \n      text:this.state.item\n    } \n     axios.patch('https://murmuring-fjord-22708.herokuapp.com/todos/' +id,newItem)\n           .then(response=>{\n           console.log(response,'TodoItem Updated');\n           console.log('Response Config',response.config);\n           this.setState({\n                  items:filteredItems,\n                  item:selectedItem.text,\n                  editItem:true,\n                  id:id                \n                });\n           }).catch(error=>{\n             console.log('Unable to Update');\n           })\n          };\n  render() {\n    return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-10 mx-auto col-md-8 mt-4\">\n        <h3 className =\"text-capitalize text-center\">Todo input</h3>\n       \n        <TodoInput item ={this.state.item} \n        changeInput = {this.handleChangeInput}\n         handleSubmit = {this.handleSubmit}\n         editItem ={this.state.editItem}\n         />\n        \n        <TodoList items ={this.state.items} \n           clearList={this.handleClearList}\n           deleteItem ={this.handleDeleteItem}\n           editItem={this.handleEditItem}\n         />\n        </div>\n      </div>\n    </div>\n      \n       );\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}